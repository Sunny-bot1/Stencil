parameter L, M, N;
iterator k, j, i;
double up_0[0:L][0:M][0:N];
double up_1[0:L][0:M][0:N];
double up_2[0:L][0:M][0:N];
double u_0[0:L][0:M][0:N];
double u_1[0:L][0:M][0:N];
double u_2[0:L][0:M][0:N];
double um_0[0:L][0:M][0:N];
double um_1[0:L][0:M][0:N];
double um_2[0:L][0:M][0:N];
double rho[0:L][0:M][0:N];
double strx[0:N];
double stry[0:M];
double strz[0:L];
double dcx[0:N];
double dcy[0:M];
double dcz[0:L];
double cox[0:N];
double coy[0:M];
double coz[0:L];
copyin up_0, up_1, up_2, u_0, u_1, u_2, um_0, um_1, um_2, rho, strx, stry, strz, dcx, dcy, dcz, cox, coy, coz;

stencil addsg0 (up_0, u_0, um_0, rho, strx, stry, strz, dcx, dcy, dcz, cox, coy, coz) {
	double birho;
	double up_0[0:L][0:M][0:N];
	double u_0[0:L][0:M][0:N];
	double um_0[0:L][0:M][0:N];
	double rho[0:L][0:M][0:N];
	double strx[0:N];
	double stry[0:M];
	double strz[0:L];
	double dcx[0:N];
	double dcy[0:M];
	double dcz[0:L];
	double cox[0:N];
	double coy[0:M];
	double coz[0:L];
	double beta = 0.625;
	gmem rho, strx, stry, strz, dcx, dcy, dcz, cox, coy, coz, u_0, um_0, up_0;
	birho = beta / rho[k][j][i];
	up_0[k][j][i] -= birho * (strx[i] * coy[j] * coz[k] * (rho[k][j][i+1] * dcx[i+1] * (u_0[k][j][i+2] - 2 * u_0[k][j][i+1] + u_0[k][j][i]) - 2 * rho[k][j][i] * dcx[i] * (u_0[k][j][i+1] - 2 * u_0[k][j][i] + u_0[k][j][i-1]) + rho[k][j][i-1] * dcx[i-1] * (u_0[k][j][i] - 2 * u_0[k][j][i-1] + u_0[k][j][i-2]) - rho[k][j][i+1] * dcx[i+1] * (um_0[k][j][i+2] - 2 * um_0[k][j][i+1] + um_0[k][j][i]) + 2 * rho[k][j][i] * dcx[i] * (um_0[k][j][i+1] - 2 * um_0[k][j][i] + um_0[k][j][i-1]) - rho[k][j][i-1] * dcx[i-1] * (um_0[k][j][i] - 2 * um_0[k][j][i-1] + um_0[k][j][i-2])) + stry[j] * cox[i] * coz[k] * (rho[k][j+1][i] * dcy[j+1] * (u_0[k][j+2][i] - 2 * u_0[k][j+1][i] + u_0[k][j][i]) - 2 * rho[k][j][i] * dcy[j] * (u_0[k][j+1][i] - 2 * u_0[k][j][i] + u_0[k][j-1][i]) + rho[k][j-1][i] * dcy[j-1] * (u_0[k][j][i] - 2 * u_0[k][j-1][i] + u_0[k][j-2][i]) - rho[k][j+1][i] * dcy[j+1] * (um_0[k][j+2][i] - 2 * um_0[k][j+1][i] + um_0[k][j][i]) + 2 * rho[k][j][i] * dcy[j] * (um_0[k][j+1][i] - 2 * um_0[k][j][i] + um_0[k][j-1][i]) - rho[k][j-1][i] * dcy[j-1] * (um_0[k][j][i] - 2 * um_0[k][j-1][i] + um_0[k][j-2][i])) + strz[k] * cox[i] * coy[j] * (rho[k+1][j][i] * dcz[k+1] * (u_0[k+2][j][i] - 2 * u_0[k+1][j][i] + u_0[k][j][i]) - 2 * rho[k][j][i] * dcz[k] * (u_0[k+1][j][i] - 2 * u_0[k][j][i] + u_0[k-1][j][i]) + rho[k-1][j][i] * dcz[k-1] * (u_0[k][j][i] - 2 * u_0[k-1][j][i] + u_0[k-2][j][i]) - rho[k+1][j][i] * dcz[k+1] * (um_0[k+2][j][i] - 2 * um_0[k+1][j][i] + um_0[k][j][i]) + 2 * rho[k][j][i] * dcz[k] * (um_0[k+1][j][i] - 2 * um_0[k][j][i] + um_0[k-1][j][i]) - rho[k-1][j][i] * dcz[k-1] * (um_0[k][j][i] - 2 * um_0[k-1][j][i] + um_0[k-2][j][i])));
}

stencil addsg1 (up_1, u_1, um_1, rho, strx, stry, strz, dcx, dcy, dcz, cox, coy, coz) {
	double birho;
	double up_1[0:L][0:M][0:N];
	double u_1[0:L][0:M][0:N];
	double um_1[0:L][0:M][0:N];
	double rho[0:L][0:M][0:N];
	double strx[0:N];
	double stry[0:M];
	double strz[0:L];
	double dcx[0:N];
	double dcy[0:M];
	double dcz[0:L];
	double cox[0:N];
	double coy[0:M];
	double coz[0:L];
	double beta = 0.625;
	gmem rho, strx, stry, strz, dcx, dcy, dcz, cox, coy, coz, u_1, um_1, up_1;
	birho = beta / rho[k][j][i];
	up_1[k][j][i] -= birho * (strx[i] * coy[j] * coz[k] * (rho[k][j][i+1] * dcx[i+1] * (u_1[k][j][i+2] - 2 * u_1[k][j][i+1] + u_1[k][j][i]) - 2 * rho[k][j][i] * dcx[i] * (u_1[k][j][i+1] - 2 * u_1[k][j][i] + u_1[k][j][i-1]) + rho[k][j][i-1] * dcx[i-1] * (u_1[k][j][i] - 2 * u_1[k][j][i-1] + u_1[k][j][i-2]) - rho[k][j][i+1] * dcx[i+1] * (um_1[k][j][i+2] - 2 * um_1[k][j][i+1] + um_1[k][j][i]) + 2 * rho[k][j][i] * dcx[i] * (um_1[k][j][i+1] - 2 * um_1[k][j][i] + um_1[k][j][i-1]) - rho[k][j][i-1] * dcx[i-1] * (um_1[k][j][i] - 2 * um_1[k][j][i-1] + um_1[k][j][i-2])) + stry[j] * cox[i] * coz[k] * (rho[k][j+1][i] * dcy[j+1] * (u_1[k][j+2][i] - 2 * u_1[k][j+1][i] + u_1[k][j][i]) - 2 * rho[k][j][i] * dcy[j] * (u_1[k][j+1][i] - 2 * u_1[k][j][i] + u_1[k][j-1][i]) + rho[k][j-1][i] * dcy[j-1] * (u_1[k][j][i] - 2 * u_1[k][j-1][i] + u_1[k][j-2][i]) - rho[k][j+1][i] * dcy[j+1] * (um_1[k][j+2][i] - 2 * um_1[k][j+1][i] + um_1[k][j][i]) + 2 * rho[k][j][i] * dcy[j] * (um_1[k][j+1][i] - 2 * um_1[k][j][i] + um_1[k][j-1][i]) - rho[k][j-1][i] * dcy[j-1] * (um_1[k][j][i] - 2 * um_1[k][j-1][i] + um_1[k][j-2][i])) + strz[k] * cox[i] * coy[j] * (rho[k+1][j][i] * dcz[k+1] * (u_1[k+2][j][i] - 2 * u_1[k+1][j][i] + u_1[k][j][i]) - 2 * rho[k][j][i] * dcz[k] * (u_1[k+1][j][i] - 2 * u_1[k][j][i] + u_1[k-1][j][i]) + rho[k-1][j][i] * dcz[k-1] * (u_1[k][j][i] - 2 * u_1[k-1][j][i] + u_1[k-2][j][i]) - rho[k+1][j][i] * dcz[k+1] * (um_1[k+2][j][i] - 2 * um_1[k+1][j][i] + um_1[k][j][i]) + 2 * rho[k][j][i] * dcz[k] * (um_1[k+1][j][i] - 2 * um_1[k][j][i] + um_1[k-1][j][i]) - rho[k-1][j][i] * dcz[k-1] * (um_1[k][j][i] - 2 * um_1[k-1][j][i] + um_1[k-2][j][i])));
}

stencil addsg2 (up_2, u_2, um_2, rho, strx, stry, strz, dcx, dcy, dcz, cox, coy, coz) {
	double birho;
	double up_2[0:L][0:M][0:N];
	double u_2[0:L][0:M][0:N];
	double um_2[0:L][0:M][0:N];
	double rho[0:L][0:M][0:N];
	double strx[0:N];
	double stry[0:M];
	double strz[0:L];
	double dcx[0:N];
	double dcy[0:M];
	double dcz[0:L];
	double cox[0:N];
	double coy[0:M];
	double coz[0:L];
	double beta = 0.625;
	gmem rho, strx, stry, strz, dcx, dcy, dcz, cox, coy, coz, u_2, um_2, up_2;
	birho = beta / rho[k][j][i];
	up_2[k][j][i] -= birho * (strx[i] * coy[j] * coz[k] * (rho[k][j][i+1] * dcx[i+1] * (u_2[k][j][i+2] - 2 * u_2[k][j][i+1] + u_2[k][j][i]) - 2 * rho[k][j][i] * dcx[i] * (u_2[k][j][i+1] - 2 * u_2[k][j][i] + u_2[k][j][i-1]) + rho[k][j][i-1] * dcx[i-1] * (u_2[k][j][i] - 2 * u_2[k][j][i-1] + u_2[k][j][i-2]) - rho[k][j][i+1] * dcx[i+1] * (um_2[k][j][i+2] - 2 * um_2[k][j][i+1] + um_2[k][j][i]) + 2 * rho[k][j][i] * dcx[i] * (um_2[k][j][i+1] - 2 * um_2[k][j][i] + um_2[k][j][i-1]) - rho[k][j][i-1] * dcx[i-1] * (um_2[k][j][i] - 2 * um_2[k][j][i-1] + um_2[k][j][i-2])) + stry[j] * cox[i] * coz[k] * (rho[k][j+1][i] * dcy[j+1] * (u_2[k][j+2][i] - 2 * u_2[k][j+1][i] + u_2[k][j][i]) - 2 * rho[k][j][i] * dcy[j] * (u_2[k][j+1][i] - 2 * u_2[k][j][i] + u_2[k][j-1][i]) + rho[k][j-1][i] * dcy[j-1] * (u_2[k][j][i] - 2 * u_2[k][j-1][i] + u_2[k][j-2][i]) - rho[k][j+1][i] * dcy[j+1] * (um_2[k][j+2][i] - 2 * um_2[k][j+1][i] + um_2[k][j][i]) + 2 * rho[k][j][i] * dcy[j] * (um_2[k][j+1][i] - 2 * um_2[k][j][i] + um_2[k][j-1][i]) - rho[k][j-1][i] * dcy[j-1] * (um_2[k][j][i] - 2 * um_2[k][j-1][i] + um_2[k][j-2][i])) + strz[k] * cox[i] * coy[j] * (rho[k+1][j][i] * dcz[k+1] * (u_2[k+2][j][i] - 2 * u_2[k+1][j][i] + u_2[k][j][i]) - 2 * rho[k][j][i] * dcz[k] * (u_2[k+1][j][i] - 2 * u_2[k][j][i] + u_2[k-1][j][i]) + rho[k-1][j][i] * dcz[k-1] * (u_2[k][j][i] - 2 * u_2[k-1][j][i] + u_2[k-2][j][i]) - rho[k+1][j][i] * dcz[k+1] * (um_2[k+2][j][i] - 2 * um_2[k+1][j][i] + um_2[k][j][i]) + 2 * rho[k][j][i] * dcz[k] * (um_2[k+1][j][i] - 2 * um_2[k][j][i] + um_2[k-1][j][i]) - rho[k-1][j][i] * dcz[k-1] * (um_2[k][j][i] - 2 * um_2[k-1][j][i] + um_2[k-2][j][i])));
}

[0:L - 1,0:M - 1,0:N - 1] : addsg0 (up_0, u_0, um_0, rho, strx, stry, strz, dcx, dcy, dcz, cox, coy, coz);
[0:L - 1,0:M - 1,0:N - 1] : addsg1 (up_1, u_1, um_1, rho, strx, stry, strz, dcx, dcy, dcz, cox, coy, coz);
[0:L - 1,0:M - 1,0:N - 1] : addsg2 (up_2, u_2, um_2, rho, strx, stry, strz, dcx, dcy, dcz, cox, coy, coz);
copyout up_0, up_1, up_2;

